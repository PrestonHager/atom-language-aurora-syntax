# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.aurora'
'name': 'Aurora'
'fileTypes': [
  'aurora'
]
'firstLineRegex': '//.*aurora.*'
'limitLineLength': false
'patterns': [
  {
    'comment': 'The comment structure. Any line that begins with a "//" and/or whitespace is considered a comment.'
    'match': '^\\s*//.*$'
    'name': 'comment.aurora'
  },
  {
    'comment': 'The string literal.'
    'match': '".*?"'
    'name': 'meta.string.aurora'
  },
  {
    'comment': 'Any hex number, prefixed with 0xXX.'
    'match': '0x[0-9a-fA-F]+'
    'name': 'meta.hex_number.aurora'
    'captures':
      0:
        'name': 'constant.number.aurora'
  },
  {
    'comment': 'Any other decimal number, either Integer or Float.'
    'match': '([0-9]+)(\\.[0-9]+)?'
    'name': 'meta.number.aurora'
    'captures':
      0:
        'name': 'constant.number.aurora'
  },
  {
    'comment': 'The Boolean constants.'
    'match': '(TRUE|FALSE)'
    'name': 'meta.boolean.aurora'
    'captures':
      0:
        'name': 'constant.boolean.aurora'
  },
  {
    'comment': 'All the keywords in Aurora, including String, Number, func, and end.'
    'match': '(String|Number|Void|Bool|func|if|then|end|return|byte|word|dword)'
    'name': 'meta.keyword.aurora'
  },
  {
    'comment': 'The special puncuation and symbols in Aurora.'
    'match': '(=>)'
    'name': 'meta.special.puncuation.aurora'
    'captures':
      1:
        'name': 'entity.name.type.aurora'
  },
  {
    'comment': 'The for loop function, which is a little diffrent from other functions.'
    'begin': '(for)(>)(Number|String|Bool)(: ?)'
    'beginCaptures':
      0:
        'name': 'meta.for.aurora'
      1:
        'name': 'entity.name.function.aurora'
      2:
        'name': 'punction.function.aurora'
      3:
        'name': 'keyword.function.parameters.aurora'
    'end': '(;)'
    'endCaptures':
      0:
        'name': 'meta.function.aurora'
      1:
        'name': 'puncuation.function.aurora'
    'patterns': [
      {
        'match': '".*?"'
        'name': 'constant.string.aurora'
      },
      {
        'match': '0x[0-9a-fA-F]+'
        'name': 'meta.hex_number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '([0-9]+)(\\.[0-9]+)?'
        'name': 'meta.number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '(\\w+)'
        'name': 'meta.function.parameters.aurora'
        'captures':
          1:
            'name': 'entity.other.attribute-name.aurora'
      }
    ]
  },
  {
    'comment': 'The function declaration.'
    'begin': '(func )(\\w+)(>)'
    'beginCaptures':
      0:
        'name': 'meta.function.aurora'
      1:
        'name': 'meta.keyword.aurora'
      2:
        'name': 'entity.name.function.aurora'
      3:
        'name': 'puncuation.function.aurora'
    'end': '(<|;)'
    'endCaptures':
      0:
        'name': 'meta.definition.function.aurora'
      1:
        'name': 'puncuation.function.aurora'
    'patterns': [
      {
        'match': '".*?"'
        'name': 'constant.string.aurora'
      },
      {
        'match': '0x[0-9a-fA-F]+'
        'name': 'meta.hex_number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '([0-9]+)(\\.[0-9]+)?'
        'name': 'meta.number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '(\\w+)(::)(String|Number|Bool)'
        'name': 'meta.parameter.aurora'
        'captures':
          1:
            'name': 'entity.other.attribute-name.aurora'
          2:
            'name': 'puncuation.function.parameters.aurora'
          3:
            'name': 'keyword.function.parameters.aurora'
      },
      {
        'match': '(\\w+)'
        'name': 'meta.function.parameters.aurora'
        'captures':
          1:
            'name': 'entity.other.attribute-name.aurora'
      }
    ]
  }
  {
    'comment': 'The function call.'
    'begin': '(\\w+)(>)'
    'beginCaptures':
      0:
        'name': 'meta.function.aurora'
      1:
        'name': 'entity.name.function.aurora'
      2:
        'name': 'puncuation.function.aurora'
    'end': '(<|;)'
    'endCaptures':
      0:
        'name': 'meta.function.aurora'
      1:
        'name': 'puncuation.function.aurora'
    'patterns': [
      {
        'match': '".*?"'
        'name': 'constant.string.aurora'
      },
      {
        'match': '0x[0-9a-fA-F]+'
        'name': 'meta.hex_number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '([0-9]+)(\\.[0-9]+)?'
        'name': 'meta.number.aurora'
        'captures':
          0:
            'name': 'constant.number.aurora'
      },
      {
        'match': '(\\w+)'
        'name': 'meta.function.parameters.aurora'
        'captures':
          1:
            'name': 'entity.other.attribute-name.aurora'
      }
    ]
  },
  {
    'comment': 'The if function, which, like the for function, is a little diffrent from other functions.'
    'match': '(if ?)(.*(<=|>=|<|>|==).*)'
    'captures':
      0:
        'name': 'meta.comparison.aurora'
      1:
        'name': 'meta.if.aurora'
      2:
        'name': 'entity.other.attribute-name.aurora'
      3:
        'name': 'keyword.operator.comparison.aurora'
  }
]
